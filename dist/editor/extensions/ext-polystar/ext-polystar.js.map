{"version":3,"file":"ext-polystar.js","sources":["../../../../src/editor/extensions/ext-polystar/ext-polystar.js","../../../../src/editor/extensions/ext-polystar/locale/en.js","../../../../src/editor/extensions/ext-polystar/locale/fr.js","../../../../src/editor/extensions/ext-polystar/locale/zh-CN.js"],"sourcesContent":["/**\r\n * @file ext-polystar.js\r\n *\r\n *\r\n * @copyright 2010 CloudCanvas, Inc. All rights reserved\r\n * @copyright 2021 Optimistik SAS, Inc. All rights reserved\r\n * @license MIT\r\n *\r\n */\r\n\r\nconst name = 'polystar'\r\n\r\nconst loadExtensionTranslation = async function (svgEditor) {\r\n  let translationModule\r\n  const lang = svgEditor.configObj.pref('lang')\r\n  try {\r\n    translationModule = await import(`./locale/${lang}.js`)\r\n  } catch (_error) {\r\n    console.warn(`Missing translation (${lang}) for ${name} - using 'en'`)\r\n    translationModule = await import('./locale/en.js')\r\n  }\r\n  svgEditor.i18next.addResourceBundle(lang, name, translationModule.default)\r\n}\r\n\r\nexport default {\r\n  name,\r\n  async init () {\r\n    const svgEditor = this\r\n    const { svgCanvas } = svgEditor\r\n    const { ChangeElementCommand } = svgCanvas.history\r\n    const addToHistory = (cmd) => { svgCanvas.undoMgr.addCommandToHistory(cmd) }\r\n    const { $id, $click } = svgCanvas\r\n    let selElems\r\n    let started\r\n    let newFO\r\n    await loadExtensionTranslation(svgEditor)\r\n\r\n    /**\r\n     * @param {boolean} on true=display\r\n     * @param {string} tool \"star\" or \"polygone\"\r\n     * @returns {void}\r\n     */\r\n    const showPanel = (on, tool) => {\r\n      if (on) {\r\n        $id(`${tool}_panel`).style.removeProperty('display')\r\n      } else {\r\n        $id(`${tool}_panel`).style.display = 'none'\r\n      }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} attr attribute to change\r\n     * @param {string|Float} val new value\r\n     * @returns {void}\r\n     */\r\n    const setAttr = (attr, val) => {\r\n      svgCanvas.changeSelectedAttribute(attr, val)\r\n      svgCanvas.call('changed', selElems)\r\n    }\r\n\r\n    /**\r\n     * @param {Float} n angle\r\n     * @return {Float} cotangeante\r\n     */\r\n    const cot = (n) => 1 / Math.tan(n)\r\n\r\n    /**\r\n     * @param {Float} n angle\r\n     * @returns {Float} sec\r\n     */\r\n    const sec = (n) => 1 / Math.cos(n)\r\n\r\n    return {\r\n      name: svgEditor.i18next.t(`${name}:name`),\r\n      // The callback should be used to load the DOM with the appropriate UI items\r\n      callback () {\r\n        // Add the button and its handler(s)\r\n        // Note: the star extension needs to be loaded before the polygon extension\r\n        const fbtitle = `${name}:title`\r\n        const titleStar = `${name}:buttons.0.title`\r\n        const titlePolygon = `${name}:buttons.1.title`\r\n        const buttonTemplate = `\r\n            <se-flyingbutton id=\"tools_polygon\" title=\"${fbtitle}\">\r\n              <se-button id=\"tool_star\" title=\"${titleStar}\" src=\"star.svg\">\r\n              </se-button>\r\n              <se-button id=\"tool_polygon\" title=\"${titlePolygon}\" src=\"polygon.svg\">\r\n              </se-button>\r\n            </se-flyingbutton>\r\n          `\r\n        svgCanvas.insertChildAtIndex($id('tools_left'), buttonTemplate, 10)\r\n        // handler\r\n        $click($id('tool_star'), () => {\r\n          if (this.leftPanel.updateLeftPanel('tool_star')) {\r\n            svgCanvas.setMode('star')\r\n            showPanel(true, 'star')\r\n            showPanel(false, 'polygon')\r\n          }\r\n        })\r\n        $click($id('tool_polygon'), () => {\r\n          if (this.leftPanel.updateLeftPanel('tool_polygon')) {\r\n            svgCanvas.setMode('polygon')\r\n            showPanel(true, 'polygon')\r\n            showPanel(false, 'star')\r\n          }\r\n        })\r\n        const label0 = `${name}:contextTools.0.label`\r\n        const title0 = `${name}:contextTools.0.title`\r\n        const label1 = `${name}:contextTools.1.label`\r\n        const title1 = `${name}:contextTools.1.title`\r\n        const label2 = `${name}:contextTools.2.label`\r\n        const title2 = `${name}:contextTools.2.title`\r\n        const label3 = `${name}:contextTools.3.label`\r\n        const title3 = `${name}:contextTools.3.title`\r\n        // Add the context panel and its handler(s)\r\n        const panelTemplate = document.createElement('template')\r\n        panelTemplate.innerHTML = `\r\n          <div id=\"star_panel\">\r\n            <se-spin-input id=\"starNumPoints\" label=\"${label0}\" min=1 step=1 value=5 title=\"${title0}\">\r\n            </se-spin-input>\r\n            <se-spin-input id=\"RadiusMultiplier\" label=\"${label1}\" min=1 step=2.5 value=3 title=\"${title1}\">\r\n            </se-spin-input>\r\n            <se-spin-input id=\"radialShift\" min=0 step=1 value=0 label=\"${label2}\" title=\"${title2}\">\r\n            </se-spin-input>\r\n          </div>\r\n          <div id=\"polygon_panel\">\r\n            <se-spin-input size=\"3\" id=\"polySides\" min=1 step=1 value=5 label=\"${label3}\" title=\"${title3}\">\r\n            </se-spin-input>\r\n          </div>\r\n        `\r\n        // add handlers for the panel\r\n        $id('tools_top').appendChild(panelTemplate.content.cloneNode(true))\r\n        // don't display the panels on start\r\n        showPanel(false, 'star')\r\n        showPanel(false, 'polygon')\r\n        $id('starNumPoints').addEventListener('change', (event) => {\r\n          setAttr('point', event.target.value)\r\n          const orient = 'point'\r\n          const point = event.target.value\r\n          let i = selElems.length\r\n          while (i--) {\r\n            const elem = selElems[i]\r\n            if (elem.hasAttribute('r')) {\r\n              const oldPoint = elem.getAttribute('point')\r\n              const oldPoints = elem.getAttribute('points')\r\n              const radialshift = elem.getAttribute('radialshift')\r\n              let xpos = 0\r\n              let ypos = 0\r\n              if (elem.points) {\r\n                const list = elem.points\r\n                const len = list.numberOfItems\r\n                for (let i = 0; i < len; ++i) {\r\n                  const pt = list.getItem(i)\r\n                  xpos += parseFloat(pt.x)\r\n                  ypos += parseFloat(pt.y)\r\n                }\r\n                const cx = xpos / len\r\n                const cy = ypos / len\r\n                const circumradius = Number(elem.getAttribute('r'))\r\n                const inradius = circumradius / elem.getAttribute('starRadiusMultiplier')\r\n\r\n                let polyPoints = ''\r\n                for (let s = 0; point >= s; s++) {\r\n                  let angle = 2.0 * Math.PI * (s / point)\r\n                  if (orient === 'point') {\r\n                    angle -= Math.PI / 2\r\n                  } else if (orient === 'edge') {\r\n                    angle = angle + Math.PI / point - Math.PI / 2\r\n                  }\r\n\r\n                  let x = circumradius * Math.cos(angle) + cx\r\n                  let y = circumradius * Math.sin(angle) + cy\r\n\r\n                  polyPoints += x + ',' + y + ' '\r\n\r\n                  if (!isNaN(inradius)) {\r\n                    angle = 2.0 * Math.PI * (s / point) + Math.PI / point\r\n                    if (orient === 'point') {\r\n                      angle -= Math.PI / 2\r\n                    } else if (orient === 'edge') {\r\n                      angle = angle + Math.PI / point - Math.PI / 2\r\n                    }\r\n                    angle += radialshift\r\n\r\n                    x = inradius * Math.cos(angle) + cx\r\n                    y = inradius * Math.sin(angle) + cy\r\n\r\n                    polyPoints += x + ',' + y + ' '\r\n                  }\r\n                }\r\n                elem.setAttribute('points', polyPoints)\r\n                addToHistory(new ChangeElementCommand(elem, { point: oldPoint, points: oldPoints }))\r\n              }\r\n            }\r\n          }\r\n        })\r\n        $id('RadiusMultiplier').addEventListener('change', (event) => {\r\n          setAttr('starRadiusMultiplier', event.target.value)\r\n        })\r\n        $id('radialShift').addEventListener('change', (event) => {\r\n          setAttr('radialshift', event.target.value)\r\n        })\r\n        $id('polySides').addEventListener('change', (event) => {\r\n          setAttr('sides', event.target.value)\r\n          const sides = event.target.value\r\n          let i = selElems.length\r\n          while (i--) {\r\n            const elem = selElems[i]\r\n            if (elem.hasAttribute('edge')) {\r\n              const oldSides = elem.getAttribute('sides')\r\n              const oldPoints = elem.getAttribute('points')\r\n              let xpos = 0\r\n              let ypos = 0\r\n              if (elem.points) {\r\n                const list = elem.points\r\n                const len = list.numberOfItems\r\n                for (let i = 0; i < len; ++i) {\r\n                  const pt = list.getItem(i)\r\n                  xpos += parseFloat(pt.x)\r\n                  ypos += parseFloat(pt.y)\r\n                }\r\n                const cx = xpos / len\r\n                const cy = ypos / len\r\n                const edg = elem.getAttribute('edge')\r\n                const inradius = (edg / 2) * cot(Math.PI / sides)\r\n                const circumradius = inradius * sec(Math.PI / sides)\r\n                let points = ''\r\n                for (let s = 0; sides >= s; s++) {\r\n                  const angle = (2.0 * Math.PI * s) / sides\r\n                  const x = circumradius * Math.cos(angle) + cx\r\n                  const y = circumradius * Math.sin(angle) + cy\r\n                  points += x + ',' + y + ' '\r\n                }\r\n                elem.setAttribute('points', points)\r\n                addToHistory(new ChangeElementCommand(elem, { sides: oldSides, points: oldPoints }))\r\n              }\r\n            }\r\n          }\r\n        })\r\n      },\r\n      mouseDown (opts) {\r\n        if (svgCanvas.getMode() === 'star') {\r\n          const fill = svgCanvas.getColor('fill')\r\n          const stroke = svgCanvas.getColor('stroke')\r\n          const strokeWidth = svgCanvas.getStrokeWidth()\r\n          started = true\r\n          newFO = svgCanvas.addSVGElementsFromJson({\r\n            element: 'polygon',\r\n            attr: {\r\n              cx: opts.start_x,\r\n              cy: opts.start_y,\r\n              id: svgCanvas.getNextId(),\r\n              shape: 'star',\r\n              point: $id('starNumPoints').value,\r\n              r: 0,\r\n              radialshift: $id('radialShift').value,\r\n              r2: 0,\r\n              orient: 'point',\r\n              fill,\r\n              stroke,\r\n              'stroke-width': strokeWidth\r\n            }\r\n          })\r\n          return {\r\n            started: true\r\n          }\r\n        }\r\n        if (svgCanvas.getMode() === 'polygon') {\r\n          const fill = svgCanvas.getColor('fill')\r\n          const stroke = svgCanvas.getColor('stroke')\r\n          const strokeWidth = svgCanvas.getStrokeWidth()\r\n          started = true\r\n          newFO = svgCanvas.addSVGElementsFromJson({\r\n            element: 'polygon',\r\n            attr: {\r\n              cx: opts.start_x,\r\n              cy: opts.start_y,\r\n              id: svgCanvas.getNextId(),\r\n              shape: 'regularPoly',\r\n              sides: $id('polySides').value,\r\n              orient: 'x',\r\n              edge: 0,\r\n              fill,\r\n              stroke,\r\n              'stroke-width': strokeWidth\r\n            }\r\n          })\r\n\r\n          return {\r\n            started: true\r\n          }\r\n        }\r\n        return undefined\r\n      },\r\n      mouseMove (opts) {\r\n        if (!started) {\r\n          return undefined\r\n        }\r\n        if (svgCanvas.getMode() === 'star') {\r\n          const cx = Number(newFO.getAttribute('cx'))\r\n          const cy = Number(newFO.getAttribute('cy'))\r\n          const point = Number(newFO.getAttribute('point'))\r\n          const orient = newFO.getAttribute('orient')\r\n          const fill = newFO.getAttribute('fill')\r\n          const stroke = newFO.getAttribute('stroke')\r\n          const strokeWidth = Number(newFO.getAttribute('stroke-width'))\r\n          const radialshift = Number(newFO.getAttribute('radialshift'))\r\n\r\n          let x = opts.mouse_x\r\n          let y = opts.mouse_y\r\n\r\n          const circumradius =\r\n            Math.sqrt((x - cx) * (x - cx) + (y - cy) * (y - cy)) / 1.5\r\n          const RadiusMultiplier = document.getElementById('RadiusMultiplier').value\r\n          const inradius =\r\n            circumradius / RadiusMultiplier\r\n          newFO.setAttribute('r', circumradius)\r\n          newFO.setAttribute('r2', inradius)\r\n          newFO.setAttribute('starRadiusMultiplier', RadiusMultiplier)\r\n\r\n          let polyPoints = ''\r\n          for (let s = 0; point >= s; s++) {\r\n            let angle = 2.0 * Math.PI * (s / point)\r\n            if (orient === 'point') {\r\n              angle -= Math.PI / 2\r\n            } else if (orient === 'edge') {\r\n              angle = angle + Math.PI / point - Math.PI / 2\r\n            }\r\n\r\n            x = circumradius * Math.cos(angle) + cx\r\n            y = circumradius * Math.sin(angle) + cy\r\n\r\n            polyPoints += x + ',' + y + ' '\r\n\r\n            if (!isNaN(inradius)) {\r\n              angle = 2.0 * Math.PI * (s / point) + Math.PI / point\r\n              if (orient === 'point') {\r\n                angle -= Math.PI / 2\r\n              } else if (orient === 'edge') {\r\n                angle = angle + Math.PI / point - Math.PI / 2\r\n              }\r\n              angle += radialshift\r\n\r\n              x = inradius * Math.cos(angle) + cx\r\n              y = inradius * Math.sin(angle) + cy\r\n\r\n              polyPoints += x + ',' + y + ' '\r\n            }\r\n          }\r\n          newFO.setAttribute('points', polyPoints)\r\n          newFO.setAttribute('fill', fill)\r\n          newFO.setAttribute('stroke', stroke)\r\n          newFO.setAttribute('stroke-width', strokeWidth)\r\n          /* const shape = */ newFO.getAttribute('shape')\r\n\r\n          return {\r\n            started: true\r\n          }\r\n        }\r\n        if (svgCanvas.getMode() === 'polygon') {\r\n          const cx = Number(newFO.getAttribute('cx'))\r\n          const cy = Number(newFO.getAttribute('cy'))\r\n          const sides = Number(newFO.getAttribute('sides'))\r\n          // const orient = newFO.getAttribute('orient');\r\n          const fill = newFO.getAttribute('fill')\r\n          const stroke = newFO.getAttribute('stroke')\r\n          const strokeWidth = Number(newFO.getAttribute('stroke-width'))\r\n\r\n          let x = opts.mouse_x\r\n          let y = opts.mouse_y\r\n\r\n          const edg =\r\n            Math.sqrt((x - cx) * (x - cx) + (y - cy) * (y - cy)) / 1.5\r\n          newFO.setAttribute('edge', edg)\r\n\r\n          const inradius = (edg / 2) * cot(Math.PI / sides)\r\n          const circumradius = inradius * sec(Math.PI / sides)\r\n          let points = ''\r\n          for (let s = 0; sides >= s; s++) {\r\n            const angle = (2.0 * Math.PI * s) / sides\r\n            x = circumradius * Math.cos(angle) + cx\r\n            y = circumradius * Math.sin(angle) + cy\r\n\r\n            points += x + ',' + y + ' '\r\n          }\r\n\r\n          // const poly = newFO.createElementNS(NS.SVG, 'polygon');\r\n          newFO.setAttribute('points', points)\r\n          newFO.setAttribute('fill', fill)\r\n          newFO.setAttribute('stroke', stroke)\r\n          newFO.setAttribute('stroke-width', strokeWidth)\r\n          return {\r\n            started: true\r\n          }\r\n        }\r\n        return undefined\r\n      },\r\n      mouseUp () {\r\n        if (svgCanvas.getMode() === 'star') {\r\n          const r = newFO.getAttribute('r')\r\n          return {\r\n            keep: r !== '0',\r\n            element: newFO\r\n          }\r\n        }\r\n        if (svgCanvas.getMode() === 'polygon') {\r\n          const edge = newFO.getAttribute('edge')\r\n          const keep = edge !== '0'\r\n          // svgCanvas.addToSelection([newFO], true);\r\n          return {\r\n            keep,\r\n            element: newFO\r\n          }\r\n        }\r\n        return undefined\r\n      },\r\n      selectedChanged (opts) {\r\n        // Use this to update the current selected elements\r\n        selElems = opts.elems\r\n\r\n        let i = selElems.length\r\n        while (i--) {\r\n          const elem = selElems[i]\r\n          if (elem?.getAttribute('shape') === 'star') {\r\n            if (opts.selectedElement && !opts.multiselected) {\r\n              $id('starNumPoints').value = elem.getAttribute('point')\r\n              $id('radialShift').value = elem.getAttribute('radialshift')\r\n              showPanel(true, 'star')\r\n            } else {\r\n              showPanel(false, 'star')\r\n            }\r\n          } else if (elem?.getAttribute('shape') === 'regularPoly') {\r\n            if (opts.selectedElement && !opts.multiselected) {\r\n              $id('polySides').value = elem.getAttribute('sides')\r\n              showPanel(true, 'polygon')\r\n            } else {\r\n              showPanel(false, 'polygon')\r\n            }\r\n          } else {\r\n            showPanel(false, 'star')\r\n            showPanel(false, 'polygon')\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","export default {\r\n  name: 'star',\r\n  title: 'Polygone/Star Tool',\r\n  buttons: [\r\n    {\r\n      title: 'Star Tool'\r\n    },\r\n    {\r\n      title: 'Polygon Tool'\r\n    }\r\n  ],\r\n  contextTools: [\r\n    {\r\n      title: 'Number of Sides',\r\n      label: 'points'\r\n    },\r\n    {\r\n      title: 'Pointiness',\r\n      label: 'Pointiness'\r\n    },\r\n    {\r\n      title: 'Twists the star',\r\n      label: 'Radial Shift'\r\n    },\r\n    {\r\n      title: 'Number of Sides',\r\n      label: 'sides'\r\n    }\r\n  ]\r\n}\r\n","export default {\r\n  name: 'etoile',\r\n  title: 'Outil Polygone/Etoile',\r\n  buttons: [\r\n    {\r\n      title: 'Outil Etoile'\r\n    },\r\n    {\r\n      title: 'Outil Polygone'\r\n    }\r\n  ],\r\n  contextTools: [\r\n    {\r\n      title: 'Nombre de côtés',\r\n      label: 'points'\r\n    },\r\n    {\r\n      title: 'Précision',\r\n      label: 'Précision'\r\n    },\r\n    {\r\n      title: 'Torsion Etoile',\r\n      label: 'Décalage Radial'\r\n    },\r\n    {\r\n      title: 'Nombre de côtés',\r\n      label: 'côtés'\r\n    }\r\n  ]\r\n}\r\n","export default {\r\n  name: '星形',\r\n  title: 'Polygone/Star Tool',\r\n  buttons: [\r\n    {\r\n      title: '星形工具'\r\n    },\r\n    {\r\n      title: '多边形工具'\r\n    }\r\n  ],\r\n  contextTools: [\r\n    {\r\n      title: '顶点',\r\n      label: '顶点'\r\n    },\r\n    {\r\n      title: '钝度',\r\n      label: '钝度'\r\n    },\r\n    {\r\n      title: '径向',\r\n      label: '径向'\r\n    },\r\n    {\r\n      title: '边数',\r\n      label: '边数'\r\n    }\r\n  ]\r\n}\r\n"],"names":["name","loadExtensionTranslation","async","svgEditor","translationModule","lang","configObj","pref","__variableDynamicImportRuntime0__","_error","console","warn","Promise","i18next","addResourceBundle","default","this","svgCanvas","ChangeElementCommand","history","addToHistory","cmd","undoMgr","addCommandToHistory","$id","$click","selElems","started","newFO","showPanel","on","tool","style","removeProperty","display","setAttr","attr","val","changeSelectedAttribute","call","cot","n","Math","tan","sec","cos","t","callback","fbtitle","titleStar","titlePolygon","buttonTemplate","insertChildAtIndex","leftPanel","updateLeftPanel","setMode","label0","title0","label1","title1","label2","title2","label3","title3","panelTemplate","document","createElement","innerHTML","appendChild","content","cloneNode","addEventListener","event","target","value","point","i","length","elem","hasAttribute","oldPoint","getAttribute","oldPoints","radialshift","xpos","ypos","points","list","len","numberOfItems","pt","getItem","parseFloat","x","y","cx","cy","circumradius","Number","inradius","polyPoints","s","angle","PI","sin","isNaN","setAttribute","sides","oldSides","mouseDown","opts","getMode","fill","getColor","stroke","strokeWidth","getStrokeWidth","addSVGElementsFromJson","element","start_x","start_y","id","getNextId","shape","r","r2","orient","edge","mouseMove","mouse_x","mouse_y","sqrt","RadiusMultiplier","getElementById","edg","mouseUp","keep","selectedChanged","elems","selectedElement","multiselected","title","buttons","contextTools","label"],"mappings":"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"}