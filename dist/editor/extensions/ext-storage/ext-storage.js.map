{"version":3,"file":"ext-storage.js","sources":["../../../../src/editor/extensions/ext-storage/storageDialog.js","../../../../src/editor/extensions/ext-storage/ext-storage.js"],"sourcesContent":["/* globals svgEditor */\r\nimport storageDialogHTML from './storageDialog.html'\r\n\r\nconst template = document.createElement('template')\r\ntemplate.innerHTML = storageDialogHTML\r\n/**\r\n * @class SeStorageDialog\r\n */\r\nexport class SeStorageDialog extends HTMLElement {\r\n  /**\r\n    * @function constructor\r\n    */\r\n  constructor () {\r\n    super()\r\n    // create the shadowDom and insert the template\r\n    this._shadowRoot = this.attachShadow({ mode: 'open' })\r\n    this._shadowRoot.append(template.content.cloneNode(true))\r\n    this.$dialog = this._shadowRoot.querySelector('#dialog_box')\r\n    this.$storage = this._shadowRoot.querySelector('#js-storage')\r\n    this.$okBtn = this._shadowRoot.querySelector('#storage_ok')\r\n    this.$cancelBtn = this._shadowRoot.querySelector('#storage_cancel')\r\n    this.$storageInput = this._shadowRoot.querySelector('#se-storage-pref')\r\n    this.$rememberInput = this._shadowRoot.querySelector('#se-remember')\r\n  }\r\n\r\n  /**\r\n   * @function init\r\n   * @param {any} name\r\n   * @returns {void}\r\n   */\r\n  init (i18next) {\r\n    this.setAttribute('common-ok', i18next.t('common.ok'))\r\n    this.setAttribute('common-cancel', i18next.t('common.cancel'))\r\n    this.setAttribute('notify-editor_pref_msg', i18next.t('notification.editorPreferencesMsg'))\r\n    this.setAttribute('properties-prefs_and_content', i18next.t('properties.prefs_and_content'))\r\n    this.setAttribute('properties-prefs_only', i18next.t('properties.prefs_only'))\r\n    this.setAttribute('properties-no_prefs_or_content', i18next.t('properties.no_prefs_or_content'))\r\n    this.setAttribute('tools-remember_this_choice', i18next.t('tools.remember_this_choice'))\r\n    this.setAttribute('tools-remember_this_choice_title', i18next.t('tools.remember_this_choice_title'))\r\n  }\r\n\r\n  /**\r\n   * @function observedAttributes\r\n   * @returns {any} observed\r\n   */\r\n  static get observedAttributes () {\r\n    return ['dialog', 'storage', 'common-ok', 'common-cancel', 'notify-editor_pref_msg', 'properties-prefs_and_content', 'tools-remember_this_choice', 'tools-remember_this_choice_title', 'properties-prefs_only', 'properties-no_prefs_or_content']\r\n  }\r\n\r\n  /**\r\n   * @function attributeChangedCallback\r\n   * @param {string} name\r\n   * @param {string} oldValue\r\n   * @param {string} newValue\r\n   * @returns {void}\r\n   */\r\n  attributeChangedCallback (name, oldValue, newValue) {\r\n    let node\r\n    switch (name) {\r\n      case 'dialog':\r\n        if (newValue === 'open') {\r\n          this.$dialog.open()\r\n        } else {\r\n          this.$dialog.close()\r\n        }\r\n        break\r\n      case 'storage':\r\n        if (newValue === 'true') {\r\n          this.$storageInput.options[0].disabled = false\r\n        } else {\r\n          this.$storageInput.options[0].disabled = true\r\n        }\r\n        break\r\n      case 'common-ok':\r\n        this.$okBtn.textContent = newValue\r\n        break\r\n      case 'common-cancel':\r\n        this.$cancelBtn.textContent = newValue\r\n        break\r\n      case 'notify-editor_pref_msg':\r\n        node = this._shadowRoot.querySelector('#notificationNote')\r\n        node.textContent = newValue\r\n        break\r\n      case 'properties-prefs_and_content':\r\n        node = this._shadowRoot.querySelector('#prefsAndContent')\r\n        node.textContent = newValue\r\n        break\r\n      case 'properties-prefs_only':\r\n        node = this._shadowRoot.querySelector('#prefsOnly')\r\n        node.textContent = newValue\r\n        break\r\n      case 'properties-no_prefs_or_content':\r\n        node = this._shadowRoot.querySelector('#noPrefsOrContent')\r\n        node.textContent = newValue\r\n        break\r\n      case 'tools-remember_this_choice':\r\n        node = this._shadowRoot.querySelector('#se-remember-title')\r\n        node.prepend(newValue)\r\n        break\r\n      case 'tools-remember_this_choice_title':\r\n        node = this._shadowRoot.querySelector('#se-remember-title')\r\n        node.setAttribute('title', newValue)\r\n        break\r\n      default:\r\n        // super.attributeChangedCallback(name, oldValue, newValue);\r\n        break\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @function get\r\n   * @returns {any}\r\n   */\r\n  get dialog () {\r\n    return this.getAttribute('dialog')\r\n  }\r\n\r\n  /**\r\n   * @function set\r\n   * @returns {void}\r\n   */\r\n  set dialog (value) {\r\n    this.setAttribute('dialog', value)\r\n  }\r\n\r\n  /**\r\n   * @function connectedCallback\r\n   * @returns {void}\r\n   */\r\n  connectedCallback () {\r\n    const onSubmitHandler = (e, action) => {\r\n      const triggerEvent = new CustomEvent('change',\r\n        {\r\n          detail: {\r\n            trigger: action,\r\n            select: this.$storageInput.value,\r\n            checkbox: this.$rememberInput.checked\r\n          }\r\n        })\r\n      this.dispatchEvent(triggerEvent)\r\n    }\r\n    svgEditor.$click(this.$okBtn, (evt) => onSubmitHandler(evt, 'ok'))\r\n    svgEditor.$click(this.$cancelBtn, (evt) => onSubmitHandler(evt, 'cancel'))\r\n  }\r\n}\r\n\r\n// Register\r\ncustomElements.define('se-storage-dialog', SeStorageDialog)\r\n","/**\r\n * @file ext-storage.js\r\n *\r\n * This extension allows automatic saving of the SVG canvas contents upon\r\n *  page unload (which can later be automatically retrieved upon future\r\n *  editor loads).\r\n *\r\n *  The functionality was originally part of the SVG Editor, but moved to a\r\n *  separate extension to make the setting behavior optional, and adapted\r\n *  to inform the user of its setting of local data.\r\n *\r\n * @license MIT\r\n *\r\n * @copyright 2010 Brett Zamir\r\n * @todo Revisit on whether to use `svgEditor.pref` over directly setting\r\n * `curConfig` in all extensions for a more public API (not only for `extPath`\r\n * and `imagePath`, but other currently used config in the extensions)\r\n * @todo We might provide control of storage settings through the UI besides the\r\n *   initial (or URL-forced) dialog. *\r\n */\r\nimport './storageDialog.js'\r\n\r\n/**\r\n * Expire the storage cookie.\r\n * @returns {void}\r\n */\r\nconst removeStoragePrefCookie = () => {\r\n  expireCookie('svgeditstore')\r\n}\r\n/**\r\n * Set the cookie to expire.\r\n * @param {string} cookie\r\n * @returns {void}\r\n */\r\nconst expireCookie = cookie => {\r\n  document.cookie =\r\n    encodeURIComponent(cookie) + '=; expires=Thu, 01 Jan 1970 00:00:00 GMT'\r\n}\r\n\r\n/**\r\n * Replace `storagePrompt` parameter within URL.\r\n * @param {string} val\r\n * @returns {void}\r\n * @todo Replace the string manipulation with `searchParams.set`\r\n */\r\nconst replaceStoragePrompt = val => {\r\n  val = val ? 'storagePrompt=' + val : ''\r\n  const loc = top.location // Allow this to work with the embedded editor as well\r\n  if (loc.href.includes('storagePrompt=')) {\r\n    loc.href = loc.href.replace(/([&?])storagePrompt=[^&]*(&?)/, function (\r\n      n0,\r\n      n1,\r\n      amp\r\n    ) {\r\n      return (val ? n1 : '') + val + (!val && amp ? n1 : amp || '')\r\n    })\r\n  } else {\r\n    loc.href += (loc.href.includes('?') ? '&' : '?') + val\r\n  }\r\n}\r\n\r\nexport default {\r\n  name: 'storage',\r\n  init () {\r\n    const svgEditor = this\r\n    const { svgCanvas, storage } = svgEditor\r\n\r\n    // We could empty any already-set data for users when they decline storage,\r\n    //  but it would be a risk for users who wanted to store but accidentally\r\n    // said \"no\"; instead, we'll let those who already set it, delete it themselves;\r\n    // to change, set the \"emptyStorageOnDecline\" config setting to true\r\n    // in svgedit-config-iife.js/svgedit-config-es.js.\r\n    const {\r\n      // When the code in svg-editor.js prevents local storage on load per\r\n      //  user request, we also prevent storing on unload here so as to\r\n      //  avoid third-party sites making XSRF requests or providing links\r\n      // which would cause the user's local storage not to load and then\r\n      // upon page unload (such as the user closing the window), the storage\r\n      //  would thereby be set with an empty value, erasing any of the\r\n      // user's prior work. To change this behavior so that no use of storage\r\n      // or adding of new storage takes place regardless of settings, set\r\n      // the \"noStorageOnLoad\" config setting to true in svgedit-config-*.js.\r\n      noStorageOnLoad,\r\n      forceStorage,\r\n      canvasName\r\n    } = svgEditor.configObj.curConfig\r\n\r\n    // LOAD STORAGE CONTENT IF ANY\r\n    if (\r\n      storage && // Cookies do not have enough available memory to hold large documents\r\n      (forceStorage ||\r\n        (!noStorageOnLoad &&\r\n          /(?:^|;\\s*)svgeditstore=prefsAndContent/.test(document.cookie)))\r\n    ) {\r\n      const key = 'svgedit-' + canvasName\r\n      const cached = storage.getItem(key)\r\n      if (cached) {\r\n        svgEditor.loadFromString(cached)\r\n        const name = storage.getItem(`title-${key}`) ?? 'untitled.svg'\r\n        svgEditor.topPanel.updateTitle(name)\r\n      }\r\n    }\r\n\r\n    // storageDialog added to DOM\r\n    const storageBox = document.createElement('se-storage-dialog')\r\n    storageBox.setAttribute('id', 'se-storage-dialog')\r\n    svgEditor.$container.append(storageBox)\r\n    storageBox.init(svgEditor.i18next)\r\n\r\n    // manage the change in the storageDialog\r\n\r\n    storageBox.addEventListener('change', e => {\r\n      storageBox.setAttribute('dialog', 'close')\r\n      if (e?.detail?.trigger === 'ok') {\r\n        if (e?.detail?.select !== 'noPrefsOrContent') {\r\n          const storagePrompt = new URL(top.location).searchParams.get(\r\n            'storagePrompt'\r\n          )\r\n          document.cookie =\r\n            'svgeditstore=' +\r\n            encodeURIComponent(e.detail.select) +\r\n            '; expires=Fri, 31 Dec 9999 23:59:59 GMT'\r\n          if (storagePrompt === 'true' && e?.detail?.checkbox) {\r\n            replaceStoragePrompt()\r\n            return\r\n          }\r\n        } else {\r\n          removeStoragePrefCookie()\r\n          if (\r\n            svgEditor.configObj.curConfig.emptyStorageOnDecline &&\r\n            e?.detail?.checkbox\r\n          ) {\r\n            setSvgContentStorage('')\r\n            Object.keys(svgEditor.curPrefs).forEach(name => {\r\n              name = 'svg-edit-' + name\r\n              if (svgEditor.storage) {\r\n                svgEditor.storage.removeItem(name)\r\n              }\r\n              expireCookie(name)\r\n            })\r\n          }\r\n          if (e?.detail?.select && e?.detail?.checkbox) {\r\n            replaceStoragePrompt('false')\r\n            return\r\n          }\r\n        }\r\n      } else if (e?.detail?.trigger === 'cancel') {\r\n        removeStoragePrefCookie()\r\n      }\r\n      setupBeforeUnloadListener()\r\n      svgEditor.storagePromptState = 'closed'\r\n      svgEditor.updateCanvas(true)\r\n    })\r\n\r\n    /**\r\n     * Sets SVG content as a string with \"svgedit-\" and the current\r\n     *   canvas name as namespace.\r\n     * @param {string} svgString\r\n     * @returns {void}\r\n     */\r\n    const setSvgContentStorage = svgString => {\r\n      const name = `svgedit-${svgEditor.configObj.curConfig.canvasName}`\r\n      if (!svgString) {\r\n        storage.removeItem(name)\r\n        storage.removeItem(`${name}-title`)\r\n      } else {\r\n        storage.setItem(name, svgString)\r\n        storage.setItem(`title-${name}`, svgEditor.title)\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Listen for unloading: If and only if opted in by the user, set the content\r\n     *   document and preferences into storage:\r\n     * 1. Prevent save warnings (since we're automatically saving unsaved\r\n     *       content into storage)\r\n     * 2. Use localStorage to set SVG contents (potentially too large to allow in cookies)\r\n     * 3. Use localStorage (where available) or cookies to set preferences.\r\n     * @returns {void}\r\n     */\r\n    const setupBeforeUnloadListener = () => {\r\n      window.addEventListener('beforeunload', function () {\r\n        // Don't save anything unless the user opted in to storage\r\n        if (\r\n          !/(?:^|;\\s*)svgeditstore=(?:prefsAndContent|prefsOnly)/.test(\r\n            document.cookie\r\n          )\r\n        ) {\r\n          return\r\n        }\r\n        if (/(?:^|;\\s*)svgeditstore=prefsAndContent/.test(document.cookie)) {\r\n          setSvgContentStorage(svgCanvas.getSvgString())\r\n        }\r\n\r\n        svgEditor.setConfig({ no_save_warning: true }) // No need for explicit saving at all once storage is on\r\n\r\n        const { curPrefs } = svgEditor.configObj\r\n\r\n        Object.entries(curPrefs).forEach(([key, val]) => {\r\n          const store = val !== undefined\r\n          key = 'svg-edit-' + key\r\n          if (!store) {\r\n            return\r\n          }\r\n          if (storage) {\r\n            storage.setItem(key, val)\r\n          } else if (window.widget) {\r\n            window.widget.setPreferenceForKey(val, key)\r\n          } else {\r\n            val = encodeURIComponent(val)\r\n            document.cookie =\r\n              encodeURIComponent(key) +\r\n              '=' +\r\n              val +\r\n              '; expires=Fri, 31 Dec 9999 23:59:59 GMT'\r\n          }\r\n        })\r\n      })\r\n    }\r\n\r\n    let loaded = false\r\n    return {\r\n      name: 'storage',\r\n      callback () {\r\n        const storagePrompt = new URL(top.location).searchParams.get(\r\n          'storagePrompt'\r\n        )\r\n        // No need to run this one-time dialog again just because the user\r\n        //   changes the language\r\n        if (loaded) {\r\n          return\r\n        }\r\n        loaded = true\r\n\r\n        // Note that the following can load even if \"noStorageOnLoad\" is\r\n        //   set to false; to avoid any chance of storage, avoid this\r\n        //   extension! (and to avoid using any prior storage, set the\r\n        //   config option \"noStorageOnLoad\" to true).\r\n        if (\r\n          !forceStorage &&\r\n          // If the URL has been explicitly set to always prompt the\r\n          //  user (e.g., so one can be pointed to a URL where one\r\n          // can alter one's settings, say to prevent future storage)...\r\n          (storagePrompt === 'true' ||\r\n            // ...or...if the URL at least doesn't explicitly prevent a\r\n            //  storage prompt (as we use for users who\r\n            // don't want to set cookies at all but who don't want\r\n            // continual prompts about it)...\r\n            (storagePrompt !== 'false' &&\r\n              // ...and this user hasn't previously indicated a desire for storage\r\n              !/(?:^|;\\s*)svgeditstore=(?:prefsAndContent|prefsOnly)/.test(\r\n                document.cookie\r\n              )))\r\n          // ...then show the storage prompt.\r\n        ) {\r\n          const options = Boolean(storage)\r\n          // Open select-with-checkbox dialog\r\n          // From svg-editor.js\r\n          svgEditor.storagePromptState = 'waiting'\r\n          const $storageDialog = document.getElementById('se-storage-dialog')\r\n          $storageDialog.setAttribute('dialog', 'open')\r\n          $storageDialog.setAttribute('storage', options)\r\n        } else if (!noStorageOnLoad || forceStorage) {\r\n          setupBeforeUnloadListener()\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n"],"names":["template","document","createElement","innerHTML","SeStorageDialog","HTMLElement","constructor","_shadowRoot","this","attachShadow","mode","append","content","cloneNode","$dialog","querySelector","$storage","$okBtn","$cancelBtn","$storageInput","$rememberInput","init","i18next","setAttribute","t","attributeChangedCallback","name","oldValue","newValue","node","open","close","options","disabled","textContent","prepend","getAttribute","value","connectedCallback","onSubmitHandler","e","action","triggerEvent","CustomEvent","detail","trigger","select","checkbox","checked","dispatchEvent","svgEditor","$click","evt","customElements","define","removeStoragePrefCookie","expireCookie","cookie","encodeURIComponent","replaceStoragePrompt","val","loc","top","location","href","includes","replace","n0","n1","amp","svgCanvas","storage","noStorageOnLoad","forceStorage","canvasName","configObj","curConfig","test","key","cached","getItem","loadFromString","topPanel","updateTitle","storageBox","$container","addEventListener","storagePrompt","URL","searchParams","get","_e$detail3","emptyStorageOnDecline","_e$detail4","setSvgContentStorage","Object","keys","curPrefs","forEach","removeItem","_e$detail6","setupBeforeUnloadListener","storagePromptState","updateCanvas","svgString","setItem","title","window","getSvgString","setConfig","no_save_warning","entries","_ref","undefined","widget","setPreferenceForKey","loaded","callback","Boolean","$storageDialog","getElementById"],"mappings":"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"}